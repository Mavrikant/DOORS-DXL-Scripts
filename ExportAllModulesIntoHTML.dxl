//  Export all item under the project to a folder as a HTML report.

/*
  This scipts export all item under the project to a folder as a HTML report.
*/

//**********************************  History  ******************************
// M. Serdar Karaman       2022-05-25  Initial version. It exports as txt file.

#include <C:\Program Files (x86)\IBM\Rational\DOORS\9.5\lib\dxl\addins\user\libhtml.dxl>

pragma runLim,0 // disable timeout limit
Module m = current      // check calling context
string fileBase = getenv("USERPROFILE")
fileBase = fileBase "\\Desktop\\DoorsExport"
Stat sta = create fileBase
Stream linkStream
if (null sta || !directory sta)
{
  mkdir(fileBase)
}
delete sta

void processFormal(string modName)
{
	//print("Formal Module: " fullName(mod) "\n")
  //m = mod
  do_export_file(modName)
  //dumpSingleMod(m)
  //writeBaselineToFile(mod, null)
}

void processFolder(Folder f)
{
  string fileBase = getenv("USERPROFILE")
  fileBase = fileBase "\\Desktop\\DoorsExport" fullName(f)
  Stat sta = create fileBase
  Stream linkStream
  if (null sta || !directory sta)
  {
    mkdir(fileBase)
  }else{
    delete sta
  }
	//print("Folder: " fullName(f) "\n")
}

void initialProcessFolder(Folder f)
{
  string split = null
  string delim = "/";
  for split in splitString(fullName(f), delim) do { 
    fileBase = fileBase "\\" split
    Stat sta = create fileBase
    Stream linkStream
    if (null sta || !directory sta)
    {
      mkdir(fileBase)
    }else{
      delete sta
    }
  }
}

// This function scans all items in the given folder, recursing through sub-projects and folders. 
bool initial = true;
void scanFolder(Folder f)
{

	if (null f)
	{
		//print("NULL Folder parameter passed")
		return
	}

  if(initial){initialProcessFolder(f); initial = false;}

	Item itm
  for itm in f do
	{
		if (null itm) continue
		if (isDeleted(itm)) continue

		if (type (itm) == "Folder")
		{
			processFolder(folder(itm))
			scanFolder(folder(itm))
		}
		else if (type (itm) == "Formal")
		{
      //string ModuleName = fullName(itm)
      //ModName_ ModRef = module fullName(itm)
      //Module mod = read(fullName ModRef, false)
      processFormal(fullName(itm))
		}
	}
}



/************************************
	MAIN
************************************/
print dateOf(intOf(today()))
scanFolder(current Folder)
print dateOf(intOf(today()))